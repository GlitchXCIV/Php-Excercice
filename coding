<?php

class Database {
    private $host = "localhost";
    private $db_user = "root";
    private $db_psw = "root";
    private $db_name = "php2020";
    private $mysqli;

    public function connect() {
        $connect = new mysqli($this->host, $this->db_user, $this->db_psw, $this->db_name);
        if ($connect->connect_error) {
            die('Errore di connessione (' . $connect->connect_errono . ')' . $connect->connect_error);
        } else {
            $this->mysqli = $connect;
        }
        return $this->mysqli;
    }

    public function close() {
        $this->mysqli->close();
    }
}

    abstract class Product {


        private $id;
        private $name;
        private $iva = 30;
        private $price;

        public function __construct($name, $price){
            $this->id = substr(md5(rand()), 0, 10);
            $this->name = $name;
            $this->price = $price;
            //$this->log($this->type);
        } 

        public function getId() {
            return $this->id; 
        }
        public function getName() {
            return $this->name;
        }
        public function getIva() {
            return $this->iva;
        }
        public function getPrice() {
            return $this->price*$this->getIva()/100;
        }

    }
    class Dress extends Product {
        //use Logs;
        private $size;
        private $color;
        private $type;

        public function __construct($name, $price, $size, $color, $type) {
            parent::__construct($name, $price);
            $this->size = $size;
            $this->color = $color;
            $this->type = $type;
            //$this->log($this->type);
        }
        public function getSize() {
            return $this->size;
        }
        public function getColor() {
            return $this->color;
        }
        public function getType() {
            return $this->type;
        }
    }
    class Game extends Product {
        private $publishingHouse;
        private $kind;

        public function __construct($name, $price, $publishingHouse, $kind) {
            parent::__construct($name, $price);
            $this->publishingHouse = $publishingHouse;
            $this->kind = $kind;
            //$this->log($this->type);
        }
        public function getPublishingHouse() {
            return $this->publishingHouse;
        }
        public function getKind() {
            return $this->kind;
        }
    }
    class Order {
        private $saleDate;
        private $product;
        private $quantity;
        
        public function __construct($saleDate, $product, $quantity) {
            $this->saleDate = $saleDate;
            $this->product = $product;
            $this->quantity = $quantity;
            //$this->log($this->type);
        }
        public function getSaleDate() {
            return $this->saleDate;
        }
        public function getProduct() {
            return $this->product;
        }
        public function getQuantity() {
            return $this->quantity;
        }
    }

   class Seller {
       private $id;
       private $name;
       private $surname;
       private $orders;

       public function __construct($name, $surname) {
           $this->name = $name;
           $this->surname = $surname;
           $this->id = substr(md5(rand()), 0, 5);
           //$this->log($this->type);
       }
       public function addOrder(Order $order) {
           $this->orders[] = $order;
       }
       public function countOrders() {
           return count($this->orders);
       }
       public function detailsOrders() {
           return json_encode($this->orders);
       }
       public function leastSoldProduct() {
        $orders = $this->detailsOrders();
        $least = 0;
        $quantity = 0;
        for ($i=0; $i < count($orders); $i++) {
            if ($least > $orders[$i]['quantita']) {
                $least = $orders[$i]['quantita']; $quantity = $i;
              }
       echo json_encode($orders[$least], true);
            }
        } 
       public function mostRecentOrder() {
        $orders = $this->detailsOrders();
        $least = 1883237886; $most = 0;
        for ($i=0; $i < count($orders); $i++) {
          if ($least < $orders[$i]['datavendita']) {
            $least = $orders[$i]['datavendita']; $most = $i;
          }
        }
        echo json_encode($orders[$most], true);

       }
       public function lessProfitabileSeller() {
        $orders = $this->detailsOrders();
          $sum = 0;
          foreach ($orders as $ord) {
            $sum += $ord['prezzo'] * $ord['quantita'];
          }
          return $sum;
       }
   }
//istanziamo 3 venditori random
$names = ["Alessandro", "Gaetano", "Salvatore", "Claudio"];
$surnames = ["Bianchi", "Rossi", "Verdi", "Neri"];
for ($i = 0; $i <= 2; $i++) {
    $sellers[] = new Seller($names[array_rand($names)], $surnames[array_rand($surnames)]); 
}
foreach($seller as $sel) {
    $count = rand(5,10);
    $add = 0;
    $added = 0;
    while($add <= $count) {
        $added = rand(1,4);
        $add += $added;
        if($add > $count) {
            $added = $add - $count;
        }
        $sel->addOrder(new Order(time()+rand(-100,100), $products(array_rand($products)), $added));
    }
} 

$products = [];
$products[] =  New Game ("Monopoly", 30, "Hasbro", "Gioco di società");
$products[] =  New Game ("Risiko", 27,"Editrice Giochi", "Giochi di società");
$products[] =  New Game ("Barbie", 17, "Mattel", "Bambole");
$products[] =  New Dress ("Jeans", 27, "M", "Denim", "Push-up");
$products[] =  New Dress ("Cardigan", 15, "L", "Magenta", "Slim");
$products[] =  New Dress ("T-Shirt", 7,"L", "Fantasia", "Maglia");


print_r($sellers); 
print_r($products);
print_r($seller[0]); 

